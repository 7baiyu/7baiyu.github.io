---
import {
  BANNER_IMAGES,
  BANNER_HEIGHT,
  SITE_PAGES,
  TYPEWRITER_TEXTS,
} from "@config";

export interface Props {
  title?: string;
  subtitle?: string;
}

const { title, subtitle } = Astro.props;

// 页面配置
const currentPath = Astro.url.pathname;
let pageKey = "home";
if (currentPath === "/") {
  pageKey = "home";
} else if (currentPath === "/about") {
  pageKey = "about";
} else if (
  currentPath.startsWith("/blog/") &&
  !currentPath.includes("/blog/page/") &&
  currentPath !== "/blog" &&
  !currentPath.includes("/blog/tag/") &&
  !currentPath.includes("/blog/category/")
) {
  pageKey = "home"; // 博客详情页用 home 配置
} else {
  pageKey = currentPath.replace(/^\//, "");
}

const cleanPageKey = pageKey.replace(/\/$/, "");
const pageConfig =
  SITE_PAGES[cleanPageKey] ?? SITE_PAGES[pageKey] ?? SITE_PAGES["home"];
const useLargeFont =
  pageKey === "home" ||
  (currentPath.startsWith("/blog/") &&
    !currentPath.includes("/blog/page/") &&
    currentPath !== "/blog" &&
    !currentPath.includes("/blog/tag/") &&
    !currentPath.includes("/blog/category/"));
const useTypewriter =
  pageKey === "home" ||
  (currentPath.startsWith("/blog/") &&
    !currentPath.includes("/blog/page/") &&
    currentPath !== "/blog" &&
    !currentPath.includes("/blog/tag/") &&
    !currentPath.includes("/blog/category/"));
const displayTitle = pageConfig.title || "";
const displaySubtitle = pageConfig.subtitle || "";
const hasTitle = displayTitle !== undefined && displayTitle !== "";
const hasSubtitle = displaySubtitle !== undefined && displaySubtitle !== "";

// 使用配置中的第一张图片作为静态背景
const staticBgImage = BANNER_IMAGES[0];
const bannerHeight = BANNER_HEIGHT;
---

<div id="banner" class="banner" style={`background-image: url(${staticBgImage});`}>
  <div class="banner-inner h-full w-full">
    <!-- 标题和副标题 -->
    {
      (hasTitle || hasSubtitle) && (
        <div class="relative h-[95%] w-full">
          <div class="absolute left-1/2 top-1/2 w-4/5 -translate-x-1/2 -translate-y-1/2 lg:w-3/4">
            <div class="flex flex-col">
              {hasTitle && (
                <h1
                  class={`title ${useLargeFont ? "text-6xl lg:text-8xl" : "text-4xl lg:text-6xl"}`}
                >
                  {displayTitle}
                </h1>
              )}
              {hasSubtitle && (
                <h2
                  class={`subtitle ${useLargeFont ? "text-2xl lg:text-4xl" : "text-lg lg:text-2xl"}`}
                >
                  {useTypewriter ? (
                    <span id="typewriter-text">{displaySubtitle}</span>
                  ) : (
                    displaySubtitle
                  )}
                </h2>
              )}
            </div>
          </div>
        </div>
      )
    }
  </div>

  <!-- 波浪动画 -->
  <div class="waves">
    <svg
      class="waves"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      viewBox="0 24 150 28"
      preserveAspectRatio="none"
      shape-rendering="auto"
    >
      <defs>
        <path
          id="gentle-wave"
          d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
        ></path>
      </defs>
      <g class="parallax">
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="0"
          class="opacity-25"
          style={{ animationDelay: "-2s", animationDuration: "7s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="3"
          class="opacity-50"
          style={{ animationDelay: "-3s", animationDuration: "10s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="5"
          class="opacity-75"
          style={{ animationDelay: "-4s", animationDuration: "13s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="7"
          style={{ animationDelay: "-5s", animationDuration: "20s" }}></use>
      </g>
    </svg>
  </div>
</div>

<!-- 打字机效果 -->
<script define:vars={{ TYPEWRITER_TEXTS, useTypewriter }} is:inline>
  document.addEventListener("astro:page-load", () => {
    if (!useTypewriter || !TYPEWRITER_TEXTS || TYPEWRITER_TEXTS.length === 0) return;
    const el = document.getElementById("typewriter-text");
    if (!el) return;
    let i = 0, j = 0, deleting = false;
    const speed = 50, delSpeed = 30, pause = 1500;

    function loop() {
      const text = TYPEWRITER_TEXTS[i];
      if (deleting) {
        el.textContent = text.substring(0, j--);
        if (j < 0) { deleting = false; i = (i + 1) % TYPEWRITER_TEXTS.length; setTimeout(loop, 300); return; }
        setTimeout(loop, delSpeed);
      } else {
        el.textContent = text.substring(0, j++);
        if (j === text.length) { deleting = true; setTimeout(loop, pause); return; }
        setTimeout(loop, speed);
      }
    }
    loop();
  });
</script>

<style define:vars={{ bannerHeight }}>
  .banner {
    @apply relative opacity-100 bg-cover bg-center bg-no-repeat;
    height: var(--bannerHeight);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
  }

  .title {
    @apply mt-8 text-center font-bold drop-shadow-lg lg:mt-1;
    font-family: var(--title-font);
    color: white;
    line-height: 1.3;
  }

  .subtitle {
    @apply text-center drop-shadow-md;
    font-family: var(--subtitle-font);
    color: white;
    white-space: pre-line;
    line-height: 1.3;
  }

  #typewriter-text::after {
    content: "|";
    animation: blink 1s infinite;
    color: white;
  }

  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }

  .waves {
    @apply absolute -bottom-[1px] h-[10vh] max-h-[9.375rem] min-h-[3.125rem] w-full;
    @apply md:h-[15vh];
  }

  .waves > .parallax use {
    fill: var(--custom-page-bg);
    animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
  }

  @keyframes wave {
    0% { transform: translate3d(-90px, 0, 0); }
    100% { transform: translate3d(85px, 0, 0); }
  }
</style>
