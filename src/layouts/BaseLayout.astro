---
import {
  SITE_TAB,
  SITE_DESCRIPTION,
  SITE_FAVICON,
  SITE_LANGUAGE,
  SITE_THEME,
  SITE_PAGES,
} from "@config";
import { ClientRouter } from "astro:transitions";
import ElementCrossing from "astro-vtbot/components/ElementCrossing.astro";
import PointerOnNavigation from "astro-vtbot/components/PointerOnNavigation.astro";
import Header from "@components/Header.astro";
import Sidebar from "@components/Sidebar.astro";
import Footer from "@components/Footer.astro";
import Navbar from "@components/Navbar.astro";
import Banner from "@components/Banner.astro";
import MobileTOC from "@components/widgets/MobileTOC.astro";

const {
  title,
  image,
  headings = [],
  showTOC = false,
  isIndexed = true,
} = Astro.props;

// Ëé∑ÂèñÂΩìÂâçÈ°µÈù¢‰ø°ÊÅØ
const currentPath = Astro.url.pathname.replace("/", "") || "home";
const pageConfig = SITE_PAGES?.[currentPath];
const bannerTitle = pageConfig?.title || title || "";
const bannerSubtitle = pageConfig?.subtitle || "";
---

<!doctype html>
<html
  lang={SITE_LANGUAGE}
  style="background-color: var(--custom-page-bg)"
  data-theme={SITE_THEME.dark}
  data-theme-type="dark"
  class="dark"
>
  <head>
    <ClientRouter />
    <ElementCrossing />
    <PointerOnNavigation />
    <Header description={SITE_DESCRIPTION} favicon={SITE_FAVICON} image={image} />
    <title>{`${title} - ${SITE_TAB}`}</title>

    <!-- Microsoft Clarity -->
    <script type="text/javascript">
      (function (c, l, a, r, i, t, y) {
        c[a] = c[a] || function () {
          (c[a].q = c[a].q || []).push(arguments);
        };
        t = l.createElement(r);
        t.async = 1;
        t.src = "https://www.clarity.ms/tag/" + i;
        y = l.getElementsByTagName(r)[0];
        y.parentNode.insertBefore(t, y);
      })(window, document, "clarity", "script", "skz108rus8");
    </script>

    <!-- ‰∏ªÈ¢òÁÆ°ÁêÜ -->
    <script define:vars={{ SITE_THEME }} is:inline>
      (function () {
        const storedTheme = localStorage.getItem("theme");
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
        let theme = storedTheme || (prefersDark ? SITE_THEME.dark : SITE_THEME.light);
        localStorage.setItem("theme", theme);
        document.documentElement.setAttribute("data-theme", theme);
        const type = theme === SITE_THEME.dark ? "dark" : "light";
        document.documentElement.setAttribute("data-theme-type", type);
        document.documentElement.classList.toggle("dark", type === "dark");
      })();
    </script>
  </head>

  <body class="flex flex-col min-h-screen bg-base-300 text-base-content transition-colors duration-500"
    {...isIndexed ? { "data-pagefind-body": true } : {}}>
    <Banner title={bannerTitle} subtitle={bannerSubtitle} />
    <Navbar />
    <div class="max-w-blog mx-auto w-full flex-grow">
      <div class="grid grid-cols-1 md:grid-cols-5 lg:grid-cols-4 gap-4 px-4 pb-4 h-full">
        <main class="col-span-1 md:col-span-4 lg:col-span-3 bg-transparent order-1 md:order-2 flex flex-col gap-4">
          <div class="flex-grow flex flex-col gap-4">
            <slot />
          </div>
          <Footer />
        </main>
        <aside class="col-span-1 bg-transparent order-2 md:order-1 md:top-4">
          <Sidebar headings={headings} showTOC={showTOC} />
          <slot name="sidebar" />
        </aside>
      </div>
    </div>

    <MobileTOC headings={headings} showTOC={showTOC} />

    <!-- üå∏ Ê®±Ëä±È£òËêΩÁâπÊïà -->
    <script is:inline>
      (function () {
        function getRandom(option, config) {
          let ret, random;
          switch (option) {
            case 'x': ret = Math.random() * window.innerWidth; break;
            case 'y': ret = Math.random() * window.innerHeight; break;
            case 's': ret = config.size.min + Math.random() * (config.size.max - config.size.min); break;
            case 'r': ret = Math.random() * 6; break;
            case 'fnx': random = config.speed.horizontal.min + Math.random() * (config.speed.horizontal.max - config.speed.horizontal.min); ret = (x) => x + random; break;
            case 'fny': random = config.speed.vertical.min + Math.random() * (config.speed.vertical.max - config.speed.vertical.min); ret = (y) => y + random; break;
            case 'fnr': ret = (r) => r + config.speed.rotation; break;
          }
          return ret;
        }
        function Sakura(x, y, s, r, fn, img, config) {
          this.x = x; this.y = y; this.s = s; this.r = r; this.fn = fn; this.img = img; this.config = config;
        }
        Sakura.prototype.draw = function (ctx) {
          ctx.save(); ctx.translate(this.x, this.y); ctx.rotate(this.r);
          ctx.drawImage(this.img, 0, 0, 40 * this.s, 40 * this.s); ctx.restore();
        };
        Sakura.prototype.update = function () {
          this.x = this.fn.x(this.x); this.y = this.fn.y(this.y); this.r = this.fn.r(this.r);
          if (this.x > window.innerWidth || this.x < 0 || this.y > window.innerHeight || this.y < 0)
            this.reset();
        };
        Sakura.prototype.reset = function () {
          this.x = getRandom('x', this.config);
          this.y = 0; this.s = getRandom('s', this.config); this.r = getRandom('r', this.config);
        };
        function SakuraManager(config) {
          this.config = config;
          this.canvas = document.createElement('canvas');
          this.ctx = this.canvas.getContext('2d');
          this.canvas.style.cssText = 'position:fixed;left:0;top:0;pointer-events:none;z-index:' + config.zIndex + ';';
          document.body.appendChild(this.canvas);
          this.resize();
          window.addEventListener('resize', () => this.resize());
          this.img = new Image();
          this.img.src = '/sakura.png';
          this.img.onload = () => this.start();
        }
        SakuraManager.prototype.resize = function () {
          this.canvas.width = window.innerWidth;
          this.canvas.height = window.innerHeight;
        };
        SakuraManager.prototype.start = function () {
          this.list = Array.from({ length: this.config.sakuraNum }, () => new Sakura(
            getRandom('x', this.config),
            getRandom('y', this.config),
            getRandom('s', this.config),
            getRandom('r', this.config),
            { x: getRandom('fnx', this.config), y: getRandom('fny', this.config), r: getRandom('fnr', this.config) },
            this.img, this.config
          ));
          const draw = () => {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.list.forEach((s) => { s.update(); s.draw(this.ctx); });
            requestAnimationFrame(draw);
          };
          draw();
        };
        window.addEventListener('DOMContentLoaded', () => new SakuraManager({
          sakuraNum: window.innerWidth < 768 ? 10 : 30,
          zIndex: 9999,
          size: { min: 0.6, max: 1.2 },
          speed: { horizontal: { min: -2, max: -0.5 }, vertical: { min: 1.2, max: 2.2 }, rotation: 0.01 },
        }));
      })();
    </script>

    <!-- ‚úÖ ‰∏çËíúÂ≠êËÆøÈóÆÁªüËÆ°ÔºàÂê´ Astro ÂÖºÂÆπÂà∑Êñ∞Êú∫Âà∂Ôºâ -->
    <script is:inline>
      function loadBusuanzi() {
        const existing = document.getElementById('busuanzi_script');
        if (existing) existing.remove();
        const script = document.createElement('script');
        script.id = 'busuanzi_script';
        script.async = true;
        script.src = 'https://busuanzi.icodeq.com/busuanzi/2.3/busuanzi.pure.mini.js';
        script.onerror = () => {
          script.src = 'https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js';
          document.body.appendChild(script);
        };
        document.body.appendChild(script);
      }
      loadBusuanzi();
      document.addEventListener('astro:page-load', loadBusuanzi);
    </script>

    <!-- Â§çÂà∂‰ª£Á†ÅÊèêÁ§∫ -->
    <script is:inline>
      document.addEventListener("astro:page-load", () => {
        document.querySelectorAll(".btn-copy").forEach((button) => {
          button.addEventListener("click", async () => {
            const codeBlock = button.closest(".ryuchan-code");
            const code = codeBlock?.querySelector("code")?.textContent;
            if (!code) return;
            const copyIcon = button.querySelector(".ryuchan-code-toolbar-copy-icon");
            const successIcon = button.querySelector(".ryuchan-code-toolbar-copy-success");
            try {
              await navigator.clipboard.writeText(code);
              copyIcon.classList.add("hidden");
              successIcon.classList.remove("hidden");
              button.classList.add("copy-success");
              setTimeout(() => {
                copyIcon.classList.remove("hidden");
                successIcon.classList.add("hidden");
                button.classList.remove("copy-success");
              }, 2000);
            } catch (err) {
              console.error("Failed to copy:", err);
            }
          });
        });
      });
    </script>

    <style is:inline>
      .btn-copy { position: relative; overflow: hidden; }
      .copy-success { animation: pulse 0.5s ease-in-out; }
      .ryuchan-code-toolbar-copy-success svg { color: #10b981; }
      @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
      }
    </style>
  </body>
</html>
